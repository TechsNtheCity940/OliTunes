#!/usr/bin/env python
"""
Generate guitar tablature for Killswitch Engage - My Curse using the OliTunes pipeline
and LilyPond for formatting.
"""

import os
import sys
import logging
import numpy as np
import librosa
from music_theory_analyzer import MusicTheoryAnalyzer
from unified_tab_processor2 import UnifiedTabProcessor
from lilypond_generator import LilyPondGenerator
from data_loaders.unified_loader import UnifiedTabLoader

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Process Killswitch Engage MP3 and generate formatted tablature."""
    # Path to the MP3 file
    audio_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 
                             "backend", "uploads", "Killswitch Engage - My Curse.mp3")
    
    if not os.path.exists(audio_path):
        logger.error(f"Audio file not found: {audio_path}")
        sys.exit(1)
    
    logger.info(f"Processing audio file: {audio_path}")
    
    # Create output directory
    output_dir = os.path.join(os.path.dirname(audio_path), "killswitch_tab_output")
    os.makedirs(output_dir, exist_ok=True)
    
    # 1. Perform music theory analysis
    try:
        # Load audio for analysis
        y, sr = librosa.load(audio_path, sr=None)
        
        # Perform music theory analysis
        analyzer = MusicTheoryAnalyzer()
        key_analysis = analyzer.detect_key(y, sr)
        key = key_analysis.get('key', 'D')  # Killswitch often plays in D
        tempo = librosa.beat.tempo(y=y, sr=sr)[0]
        
        logger.info(f"Audio analysis complete: Key={key}, Tempo={tempo}")
        
        # 2. Load relevant training data for style adaptation
        loader = UnifiedTabLoader({
            'guitarset_path': os.path.join(os.path.dirname(__file__), '..', 'data', 'guitarset_training_data'),
            'dadagp_path': os.path.join(os.path.dirname(__file__), '..', 'data', 'dadagp'),
            'ug_cache_dir': os.path.join(os.path.dirname(__file__), '..', 'data', 'ug_tabs')
        })
        
        # Load metalcore-specific examples
        metalcore_data = loader.load_ultimate_guitar('Killswitch Engage', num_tabs=5)
        drop_d_data = loader.load_ultimate_guitar('Lamb of God', num_tabs=3)  # Similar style
        
        # 3. Generate tablature with style adaptation
        processor = UnifiedTabProcessor(
            style="metalcore",
            reference_tabs=metalcore_data + (drop_d_data if drop_d_data else []),
            key=key,
            tempo=tempo
        )
        
        # Process audio with style adaptation
        tab_data = processor.process_audio(
            y, 
            sr,
            techniques=["palm_mute", "chugging", "harmonics"]  # Metalcore techniques
        )
        
        # 4. Generate professional LilyPond output for Frescobaldi
        lilypond_content = f"""\
\version "2.24.3"

% Frescobaldi metadata
#(ly:set-option 'relative-includes #t)
\include "metal_notations.ily"  % Custom metal techniques

\header {{
  title = "My Curse"
  subtitle = "Guitar Tablature"
  composer = "Killswitch Engage"
  arranger = "Generated by OliTunes"
  tagline = ""
  copyright = ""
  piece = "Metalcore"
}}

% Main music definition
music = {{
  \clef "G_8"
  \key {key} \minor
  \time 4/4
  \tempo 4 = {tempo}
  \set TabStaff.stringTunings = #drop-d-tuning
  \set Staff.midiInstrument = "distortion guitar"
  
  % Custom metal notations
  \override NoteHead.style = #'slash
  \override TabNoteHead.whiteout = ##t
  \override StringNumber.whiteout = ##t
  
  % Tab content with techniques
  {processor._format_tab_with_techniques(tab_data)}
}}

% Score structure
\score {{
  <<
    \new TabStaff \with {{
      \override StaffSymbol.line-positions = #'(-4 -2 0 2 4)
      \override TextScript.font-series = #'bold
    }} <<
      \new TabVoice {{ \music }}
      \new Lyrics \lyricmode {{ \markup {{ \teeny "P.M." }} }}
    >>
    
    % Add standard notation for reference
    \new Staff \with {{
      \remove "Tab_note_heads_engraver"
      \consists "Completion_heads_engraver"
    }} <<
      \clef "treble_8"
      \music
    >>
  >>
  
  \layout {{
    \context {{
      \TabStaff
      stringTunings = #drop-d-tuning
      \override StringNumber.stencil = ##f
    }}
    \context {{
      \Score
      \override BarNumber.padding = #3
    }}
  }}
  
  \midi {{
    \tempo 4 = {tempo}
    \context {{
      \Staff
      \remove "Staff_performer"
    }}
    \context {{
      \Voice
      \consists "Staff_performer"
    }}
  }}
}}

% Custom tuning definitions
drop-d-tuning = #'(6 -14 5 -12 5 -10 5 -9 4 -7 4 -5)
"""
        
        # Save output
        output_path = os.path.join(output_dir, "my_curse_tab.ly")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(lilypond_content)
        
        # Create companion files
        processor._create_frescobaldi_files(output_dir)
        
        logger.info(f"Successfully generated Frescobaldi project: {output_path}")
        logger.info(f"Open {os.path.join(output_dir, 'my_curse_tab.frescobaldi')} to edit")
        
    except Exception as e:
        logger.error(f"Tab generation failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
